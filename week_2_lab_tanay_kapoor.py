# -*- coding: utf-8 -*-
"""Week 2 Lab Tanay Kapoor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N6YrIZJBWlJ3vpQxwEGggiNfttUMOKlp

# Week 2 Lab - due by 11:59pm CDT on July 16th

## Objective: to practice portfolio hedging and risk management

### Setup and Loading Packages
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import yfinance as yf
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import scipy.stats as stats
from datetime import datetime, timedelta
from sklearn.preprocessing import scale
from sklearn.model_selection import train_test_split
from matplotlib.ticker import FuncFormatter

"""## Problem 1: Exploring Sector ETFs

A sector exchange-traded fund (ETF) is a pooled investment vehicle that invests specifically in the stocks and securities of a particular industry or sector. Specifically, a sector ETF could track a representative basket of stocks from a specific economic sector.<br>
<br>
Here is the list of sector ETFs:
<ul>
  <li>Healthcare: XLV</li>
  <li>Utilities: XLU</li>
  <li>Consumer Staples: XLP</li>
  <li>Materials: XLB</li>
  <li>Financials: XLF</li>
  <li>Energy: XLE</li>
  <li>Real Estate: XLRE</li>
  <li>Information Technology: XLK</li>
  <li>Consumer Discretionary: XLY</li>
  <li>Communication Services: XLC</li>
  <li>Industrials: XLI</li>
</ul>

Suppose that a portfolio manager is interested in concentrating the clients' assets in two sector ETFs. You, as a quantitative analyst generated the summary statistics table below to help with the manager's decision.
<p style="color:red;">PLEASE DO NOT CHANGE THIS CODE !!!</p>
"""

ETF_TICKERS = ['XLV','XLU','XLP','XLB','XLF','XLE','XLRE','XLK','XLY','XLI','XLC'] # Enter the ticker symbols here
TAU = 5         # Enter duration of data you want from Yahoo Finance
START_DATE = (datetime.today() - timedelta(days = TAU * 365)).strftime('%Y-%m-%d') # data start date
END_DATE = datetime.today().strftime('%Y-%m-%d') # data end date
etfPxList = yf.download(ETF_TICKERS, START_DATE, END_DATE)['Adj Close'] # retreiving asset price data from yahoo finance
# converting prices to log returns and removing NaN values
etfLogRetList = np.log(etfPxList).diff().dropna()
sum_stats = pd.DataFrame({'mean':etfLogRetList.mean(), 'sd': etfLogRetList.std(), 'skewness':etfLogRetList.skew(), 'excess kurtosis':etfLogRetList.kurtosis()})
sum_stats # output summary statistics table

"""a) Based on the summary statistics of the ETF's log returns, which two sector ETFs would you recommend to the portfolio manager?

[Write your answer here]
 The two sector ETFs I would recommend to the portfolio manager are XLK (Information technology) and XLV (healthcare). XLK has the highest mean, meaning it has the highest average log return, which is something a portfolio manager would definitely want. It also has a fairly low standard deviation, ranking similar to most of the other ETFs' standard deviations. This means the ETF does not have a high volatilty. The excess kurtosis was also one of the lowest compared to the other ETFs, meaning it has lighter tails compared to the normal distribution and is likely to generate extreme values. All of the ETFs have a negative / leftware skew, and XLK having one of the lowest skews also strengthened it as one of the better, safer ETFs.

 I choose XLV as the next ETF as it had a fairly high mean, and a low standard deviation. This means it is not too volatile, and it also had a very low left skew.

b) If the portfolio manager's objective is to achieve the maximum return with minimum risk, which two sector ETFs would you recommend to her? How does this differ from your recommendation in a)? <br>
(Hint: consider reward-to-risk ratio)
"""

################ EDIT CODE LINES HERE #################
# Create an addition column in the summary table containing the risk-to-reward  ratios for each ETF and call it 'RR'
# It should only be a one line code
# After you create the column, run this code chunk to output the new summary statistics table
sum_stats['RR'] = sum_stats['mean'] / sum_stats['sd']

sum_stats # output summary statistics table



#####################################################

"""[Write your answer here]

Looking at the RRs, the two best ETF choices would be XLK and XLP. They had the top two higest RR values, meaning there is a higher expected return per unit of risk, so these two maximize return and minimize risk. My first chouce from problem a) was also XLK. I did not choose XLP in part A. However, I choose XLV which has an RR just about 0.002 less than that of XLP, so my first two recommendations were pretty good.

c) What is ONE visualizations that you can use to evaluate the selected ETFs before including them in your portfolio? (Hint: Use the Exploratory Data Analysis (EDA) techniques you've learned)<br>
You can just name the visualization method. Extra credit is given to those who implement the visuaization on your stock selections from a) in the following code chunk.

[Write your answer here]

I would use a scatterplot. This is because I can plot the log returns compared to each other, and I see that they are positively correlated. I would not recommend having both of these stocks in the same portfolio as they are not good hedges for each other.
"""

################ EDIT CODE LINES HERE (Optional) #################


etfLogRetList.plot.scatter(x='XLK', y='XLP')
plt.title('Scatter Plot ' + 'XLK' + ' vs ' + 'XLP')

################################################################

"""## Problem 2: Evaluating Portfolio Risks

After adding two sector ETFs from part a), the portoflio manager wants to add one more asset into her portfolio, but this time, she wants an asset with daily risks no more than 3% at a 10% significance level. You have become the portoflio manager's favorite quantitative analyst since the previous task, and have been asked to suggest an asset to add to her portfolio with follow-through analysis. Please follow the instructions specified in each part of this problem to deliver your suggestion and analysis.
<br><br>
Notice that any assets can be selected, and not just stocks. For example, cryptocurrency, treasury bonds, and foreign exchange instruments can be suggested as well. Note that some relatively new cryptocurrencies (e.g., Solana, USD Coin) only have complete data dating back to three or four years ago, so setting the duration of data further back than these dates may result in inaccurate representation of their relationships.

a) Please specify your asset's ticker and their data duration here.
"""

################ EDIT CODE LINES HERE #################

ASSET_TICKER = 'BNO'     # Enter the asset's ticker here
TAU = 5             # duration span (in years) of observed data

###################################################

"""Run the following code chunk. This chuck pulls in your specified asset prices from Yahoo Finance and converts them to log returns.<br>
<p style="color:red;">PLEASE DO NOT CHANGE THIS CODE CHUNK!!!</p>
"""

START_DATE = (datetime.today() - timedelta(days = TAU * 365)).strftime('%Y-%m-%d') # data start date
END_DATE = datetime.today().strftime('%Y-%m-%d') # data end date
# storing adjusted stock prices into a variable
assetPx = yf.download(ASSET_TICKER, START_DATE, END_DATE)['Adj Close']
# converting prices to log returns and removing NaN values
assetLogRet = np.log(assetPx).diff().dropna()

"""b) Visualize a histogram for the asset's log returns. Describe its mean, standard deviation, and shape."""

################ EDIT CODE LINES HERE #################

#plotting histogram
_, bins, _= plt.hist(assetLogRet, bins=50, density=1, alpha=0.5)
plt.title("Histogram of " + ASSET_TICKER + "'s Stock Log Return")
plt.xlabel("Log Return")
plt.ylabel("Density")

# calculating statistics
mean = assetLogRet.mean()
std = assetLogRet.std()
skewness = assetLogRet.skew()
excess_kurtosis = assetLogRet.kurtosis() - 3

# dataframe with calculated statistics
summary_stats = pd.DataFrame({'mean': mean, 'standard deviation': std, 'skewness': skewness, 'excess kurtosis': excess_kurtosis}, index=[0])
summary_stats
###################################################

"""[Write your answer here]

The mean is about 0, and that tells us the average log return over our time period. The standard deviation was also low, so the stock is not too volatile. However, there is a left skew and the excess kurtosis is pretty high so there could be some extreme negative values, but since the standard deviation is so low high volatility is not expected.

c) <br>
1. Select a probabiltiy distribution that you think best fits the log returns of your selected asset in a).<br>
2. Fit this distribution on top of the histogram created in b). <br>
3. Produce a QQ Plot on the log returns of your selected asset in a). <br>
4. Name the probability distribution that you've selected and its parameters (e.g., shape, location, scale).
"""

#! pip install fitter
from fitter import Fitter
threshold = np.quantile(assetLogRet, 0.9) # threshold to limit log returns
exceedances = assetLogRet[assetLogRet > threshold] # limit log returns beyond threshold
# Declare distributions to fit
f1 = Fitter(assetLogRet,
           distributions = ["norm"
                          , "t"
                          , "laplace"
                          , "gennorm"])
f1.fit() # fit distributions
sum1 = f1.summary(plot=False) # store distribution metrics
# Declare tail distributions to fit
f2 = Fitter(exceedances,
           distributions = ["pareto"
                            , "genpareto"])
f2.fit() # fit tail distributions
sum2 = f2.summary(plot=False) # store tail distribution metrics
distr_performance = sum1.append(sum2, ignore_index = False)[['sumsquare_error', 'aic', 'bic']] # combine two summary tables
distr_performance = distr_performance.sort_values(by=['sumsquare_error']) # sort sumsquare serror in ascending order
distr_performance # output sorted summary tables

"""[Write your answer here]

I choose student-t distribution as it has the lowest SSE and BIC by far, and one of the lowest AIC. This means it is the best fit for the stock log returns compared to the other distributions.
"""

# Fit Student-t Distribution Curve
fig = plt.figure()
shape_t, loc_t, scale_t = stats.t.fit(assetLogRet) # shape, location, and scale estimates
ax1 = fig.add_subplot(111
                      , title=ASSET_TICKER + " Daily Log Return with $t_{"
                          +str(round(shape_t, 2))+"}$"
                          +"("+str(round(loc_t, 2))
                          +', '
                          + str(round(scale_t, 2))+"$^{2}$) Fit"
                      , xlabel='Log Return'
                      , ylabel='Density')
_, bins, _= ax1.hist(assetLogRet, bins=50, density=1, alpha=0.5) # log returns histogram
fitted_t = stats.t.pdf(bins, shape_t, loc_t, scale_t) # generate theoretical student-t pdf
ax1.plot(bins, fitted_t, label='Student-t PDF', color = 'r', lw=2.) # plot theoretical student-t pdf over histogram

data = {
    'Metrics': ['Degrees of freedom', 'Standard Deviation', 'Mean'],
    'Values': [shape_t, scale_t, loc_t]
}

df = pd.DataFrame(data)
print(df)

"""[Write your answer here]

I choose student-t probability distribution. The parameters for this probability distribution are mean (location), standard deviation (scale), and degrees of freedom (shape). The values of the parameters are written in the dataframe above.
"""

################ EDIT CODE LINES HERE #################

# Fit Student-t QQ Plot
fig = plt.figure()
qq_t = stats.probplot(assetLogRet, dist = 't', sparams= (shape_t, loc_t, scale_t), plot = plt, fit = True)
plt.title('Student-t QQ Plot of ' + ASSET_TICKER + ' Daily Log Return', size=15)
plt.ylabel('Sample quantiles')

###################################################

"""[Write your answer here]

I made a student-t QQ plot.

d) With the selected distribution in c), write a code piece to make a table that summarizes the rVaR and rES at the 1%, 5%, and 10% significant levels with their respective quantiles.
"""

################ EDIT CODE LINES HERE #################

# Calculating 1%, 5%, 10% quantiles
quantile_1 = stats.t.ppf(0.01, shape_t, loc_t, scale_t) # 1%
quantile_5 = stats.t.ppf(0.05, shape_t, loc_t, scale_t) # 5%
quantile_10 = stats.t.ppf(0.1, shape_t, loc_t, scale_t) # 10%

# Fit Student-t Distribution Curve
fig = plt.figure()
shape_t, loc_t, scale_t = stats.t.fit(assetLogRet) # shape, location, and scale estimates
ax1 = fig.add_subplot(111
                      , title=ASSET_TICKER + " Daily Log Return with $t_{"
                          +str(round(shape_t, 2))+"}$"
                          +"("+str(round(loc_t, 2))
                          +', '+ str(round(scale_t, 2))+"$^{2}$) Fit"
                      , xlabel='Log Return'
                      , ylabel='Density')
_, bins, _= ax1.hist(assetLogRet, bins=50, density=1, alpha=0.5) # log returns histogram
fitted_t = stats.t.pdf(bins, shape_t, loc_t, scale_t) # generate theoretical student-t pdf
ax1.plot(bins, fitted_t, label='Student-t PDF', color = 'r', lw=2.) # plot theoretical student-t pdf over histogram
# Plotting rVaR at 1%, 5%, 10% significance levels
ax1.axvline(quantile_1, color='red', linewidth=1, label='1% Quantile') # 1% cutoff
ax1.axvline(quantile_5, color='blue', linewidth=1, label='5% Quantile') # 5% cutoff
ax1.axvline(quantile_10, color='green', linewidth=1, label='10% Quantile') # 10% cutoff
ax1.legend()

# Calculating rVar at 1%, 5%, 10% significance levels
rVaR_1 = -(np.exp(quantile_1)-1) # 1% rVaR
rVaR_5 = -(np.exp(quantile_5)-1) # 5% rVaR
rVaR_10 = -(np.exp(quantile_10)-1) # 10% rVaR

# Creating a risk table
riskTable = pd.DataFrame({'Significance Level': ['1%', '5%', '10%']
                         , 'Quantile': [quantile_1, quantile_5, quantile_10]
                         , 'rVaR': [rVaR_1, rVaR_5, rVaR_10]})

import random
random.seed(10) # to reproduce the same simulation next time

# Monte Carlo simulation to generate 10 million daily losses
simLoss = -(np.exp(stats.t.rvs(df=shape_t, loc=loc_t, scale=scale_t, size=1000000))-1)

# Calculating rES at 1%, 5%, 10% significance levels
rES_1 = np.mean(simLoss[simLoss>rVaR_1]) # 1% rES
rES_5 = np.mean(simLoss[simLoss>rVaR_5]) # 5% rES
rES_10 = np.mean(simLoss[simLoss>rVaR_10]) # 10% rES

# Updating risk table to include rES
riskTable['rES'] = [rES_1, rES_5, rES_10]
riskTable
###################################################

"""e) The portfolio manager tells you that she is planning to invest $95000 into the stock that you recommended in this problem, and wants to know at least how much (in dollar amount) she has to set aside to sustain the loss that occurrs at a 10% significance level. What would you tell her?

[Write your answer here]

There is a 10% probability that BNO will lose an average of 4.3%, given that it loses at least 2.5% loss in the next trading day. That means if you buy \$95,000 worth of BNO shares, there is a 10\% probability that you can expect to lose an average of \$4,085 (4.3\% \* $95,000), given that you lose at least \$2,375 in the next trading day (2.5\% \* \$95,000). Based on this, I would use the rVaR as the reserve amount, so she should set aside at least \$2,375 (which is 2.5\% of her capital).

f) She also wants to know on average, how much (in dollar amount) of her portfolio should she size in to sustain the loss that occurrs at a 5% significance level. What would you tell her?

[Write your answer here]

Similar to my logic in the previous question, I analyze that there is a 5\% probability (significance level) that BNO will lose an average of 5.7\% (rES), given that it loses at least 3.6\% in the next trading day. I will use the rES to calculate the reserve value to sustain the loss. That would be calculated at 5.7\% \* \$95,000. This is equal to $5,415, which is the average amount of money she should size in to sustain a loss occurring at 5% significance level.
"""